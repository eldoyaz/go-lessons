разнести уроки по папкам
вызовы скалк.ран...
семафор: буф.канал, атомика, станд.либа
урок 3.3. доработать чтоб не паниковали другие горутины (все по 1сек.)
урок 3.1 - доделать signterm...


папки

import (
	"fmt"
)

func main() {
	defer fmt.Println(foo())
	fmt.Println("1")
}

func foo() string {
	defer fmt.Println("3")
	fmt.Println("2")
	return "4"
}

go.mod в корень папки
тесты везде

orCancel: посмотреть пакет Синк
или Атомик



--------------------------------------
package main

import (
    "fmt"
    "math/rand"
    "time"
)

func init() {
	rand.Seed(time.Now().UnixNano())
}

// Есть функция, работающая неопределённо долго и возвращающая число.
// Её тело нельзя изменять (представим, что внутри сетевой запрос).
func unpredictableFunc() int64 {
	rnd := rand.Int63n(5000)
	time.Sleep(time.Duration(rnd) * time.Millisecond)

	return rnd
}

// Нужно изменить функцию обёртку, которая будет работать с заданным таймаутом (например, 1 секунду).
// Если "длинная" функция отработала за это время - отлично, возвращаем результат.
// Если нет - возвращаем ошибку. Результат работы в этом случае нам не важен.
//
// Дополнительно нужно измерить, сколько выполнялась эта функция (просто вывести в лог).
// Сигнатуру функцию обёртки менять можно.
func predictableFunc() (int64, error) {

}

func main() {
	fmt.Println("started")
	fmt.Println(predictableFunc())
}
----------------------------------------------------

package main

import (
    "fmt"
    "math/rand"
    "time"
    "context"
)

func init() {
	rand.Seed(time.Now().UnixNano())
}

// Есть функция, работающая неопределённо долго и возвращающая число.
// Её тело нельзя изменять (представим, что внутри сетевой запрос).
func unpredictableFunc() int64 {
	rnd := rand.Int63n(5000)
	time.Sleep(time.Duration(rnd) * time.Millisecond)

	return rnd
}

// Нужно изменить функцию обёртку, которая будет работать с заданным таймаутом (например, 1 секунду).
// Если "длинная" функция отработала за это время - отлично, возвращаем результат.
// Если нет - возвращаем ошибку. Результат работы в этом случае нам не важен.
//
// Дополнительно нужно измерить, сколько выполнялась эта функция (просто вывести в лог).
// Сигнатуру функцию обёртки менять можно.
func predictableFunc() (int64, error) {
    ctx, cancel := context.WithTimeout(context.Background(), 1*time.Second)
    defer cancel()

    unpredictableResult := make(chan int64)
    unprErr := make(chan error)


    go func() {
        for {
            select {
                case unpredictableResult <- unpredictableFunc():
                    return
                case <-ctx.Done():
                    unprErr <- ctx.Err()
            }
        }
    }()

    for {
        select {
            case n := <- unpredictableResult:
                return n, nil
            case err := <- unprErr:
                return 0, err
        }
    }
}

func main() {
	fmt.Println("started")
	fmt.Println(predictableFunc())
}
 -----------------------------------